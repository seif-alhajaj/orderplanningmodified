package com.pcagrade.order.util;

import org.springframework.stereotype.Component;

import java.util.Map;

/**
 * Classe utilitaire pour standardiser le calcul de dur√©e des commandes
 *
 * R√àGLE M√âTIER : Dur√©e = 3 √ó nombre de cartes
 * - Chaque carte n√©cessite 3 unit√©s de temps de certification
 * - Dur√©e minimale : 3 minutes (1 carte minimum)
 * - Dur√©e par d√©faut si donn√©es manquantes : 60 minutes
 */
@Component
public class DureeCalculator {

    /**
     * Constante : temps de certification par carte (en minutes)
     */
    public static final int TEMPS_CERTIFICATION_PAR_CARTE = 3;

    /**
     * Dur√©e par d√©faut si impossible de calculer (en minutes)
     */
    public static final int DUREE_DEFAUT_MINUTES = 60;

    /**
     * Dur√©e minimale d'une commande (en minutes)
     */
    public static final int DUREE_MINIMALE_MINUTES = 3; // 1 carte minimum

    /**
     * Calcule la dur√©e d'une commande bas√©e sur le nombre de cartes
     *
     * @param nombreCartes Nombre de cartes dans la commande
     * @return Dur√©e en minutes (3 √ó nombreCartes)
     */
    public static int calculerDureeMinutes(int nombreCartes) {
        if (nombreCartes <= 0) {
            return DUREE_MINIMALE_MINUTES; // 1 carte minimum
        }
        return nombreCartes * TEMPS_CERTIFICATION_PAR_CARTE;
    }

    /**
     * Calcule la dur√©e d'une commande √† partir des donn√©es de la base
     *
     * @param commandeData Map contenant les donn√©es de la commande
     * @return Dur√©e en minutes calcul√©e selon les r√®gles m√©tier
     */
    public static int calculerDureeDepuisCommande(Map<String, Object> commandeData) {
        try {
            // 1. Priorit√© au nombre de cartes r√©elles
            Integer nombreCartesReelles = (Integer) commandeData.get("nombreCartesReelles");
            if (nombreCartesReelles != null && nombreCartesReelles > 0) {
                return calculerDureeMinutes(nombreCartesReelles);
            }

            // 2. Fallback sur nombreCartes
            Integer nombreCartes = (Integer) commandeData.get("nombreCartes");
            if (nombreCartes != null && nombreCartes > 0) {
                return calculerDureeMinutes(nombreCartes);
            }

            // 3. Fallback sur dureeMinutes existante si coh√©rente
            Integer dureeExistante = (Integer) commandeData.get("dureeMinutes");
            if (dureeExistante != null && dureeExistante >= DUREE_MINIMALE_MINUTES) {
                // V√©rifier si cette dur√©e est coh√©rente avec la r√®gle des cartes
                int cartesImpliquees = dureeExistante / TEMPS_CERTIFICATION_PAR_CARTE;
                if (dureeExistante == cartesImpliquees * TEMPS_CERTIFICATION_PAR_CARTE) {
                    return dureeExistante; // Dur√©e coh√©rente
                }
            }

            // 4. Dernier recours : dur√©e par d√©faut
            System.out.println("‚ö†Ô∏è Aucune donn√©e de cartes pour commande " +
                    commandeData.get("numeroCommande") + ", utilisation dur√©e par d√©faut");
            return DUREE_DEFAUT_MINUTES;

        } catch (Exception e) {
            System.err.println("‚ùå Erreur calcul dur√©e pour commande " +
                    commandeData.get("numeroCommande") + ": " + e.getMessage());
            return DUREE_DEFAUT_MINUTES;
        }
    }

    /**
     * Convertit une dur√©e en minutes vers un format lisible
     *
     * @param dureeMinutes Dur√©e en minutes
     * @return Format "Xh Ymin" ou "Ymin"
     */
    public static String formaterDuree(int dureeMinutes) {
        if (dureeMinutes < 60) {
            return dureeMinutes + "min";
        }

        int heures = dureeMinutes / 60;
        int minutes = dureeMinutes % 60;

        if (minutes == 0) {
            return heures + "h";
        } else {
            return heures + "h " + minutes + "min";
        }
    }

    /**
     * Calcule le nombre de cartes th√©orique bas√© sur la dur√©e
     * Utile pour la validation inverse
     *
     * @param dureeMinutes Dur√©e en minutes
     * @return Nombre de cartes th√©orique
     */
    public static int calculerNombreCartesTheorique(int dureeMinutes) {
        return Math.max(1, dureeMinutes / TEMPS_CERTIFICATION_PAR_CARTE);
    }

    /**
     * Valide la coh√©rence entre nombre de cartes et dur√©e
     *
     * @param nombreCartes Nombre de cartes d√©clar√©
     * @param dureeMinutes Dur√©e d√©clar√©e
     * @return true si coh√©rent, false sinon
     */
    public static boolean validerCoherence(int nombreCartes, int dureeMinutes) {
        int dureeAttendue = calculerDureeMinutes(nombreCartes);
        return dureeAttendue == dureeMinutes;
    }

    /**
     * G√©n√®re un rapport de calcul de dur√©e pour debug
     *
     * @param commandeData Donn√©es de la commande
     * @return Rapport d√©taill√© du calcul
     */
    public static String genererRapportCalcul(Map<String, Object> commandeData) {
        StringBuilder rapport = new StringBuilder();
        rapport.append("üîç Calcul dur√©e commande ").append(commandeData.get("numeroCommande")).append(":\n");

        Integer nombreCartesReelles = (Integer) commandeData.get("nombreCartesReelles");
        Integer nombreCartes = (Integer) commandeData.get("nombreCartes");
        Integer dureeExistante = (Integer) commandeData.get("dureeMinutes");

        rapport.append("- Cartes r√©elles: ").append(nombreCartesReelles).append("\n");
        rapport.append("- Cartes d√©clar√©es: ").append(nombreCartes).append("\n");
        rapport.append("- Dur√©e existante: ").append(dureeExistante).append(" min\n");

        int dureeCalculee = calculerDureeDepuisCommande(commandeData);
        rapport.append("- Dur√©e calcul√©e: ").append(dureeCalculee).append(" min (");
        rapport.append(formaterDuree(dureeCalculee)).append(")\n");
        rapport.append("- Cartes impliqu√©es: ").append(calculerNombreCartesTheorique(dureeCalculee));

        return rapport.toString();
    }
}